What happens when you initialize a repository? Why do you need to do it?

To initialize a repository, use the command "git init" in a directory. This will create a hidden folder called ".git" which stores all the meta data that git will use. Information, such as, past commits, which can be accessed with git log, and information that is used by other git commands that I do not fully understand yet. You need to initialize a respository otherwise it will not be possilble to use other git commands on the directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is different in the sense that your working directory may have many files in it that are not necessary for ever commit. The repository is strictly for commits. The staging area gives the user an intermediary for organizing the user's thought process before making a commit. Without the staging area, it would be difficult to visualize which files would be needed for each commit and if many files were changed, it would be difficult to keep track of each one before making the commit. The repository stays organized by only storing commits which should follow some logical step when backtracking.

How can you use the staging area to make sure you have one commit per logical change?

You can compare the changes made to files in your staging area to those that are in your last commit with the "git diff --staged" command. This will compare the staging area with your last commit. You can see which changes have been made and if there are too many or too little you can make adjustments. You can also compare files in your working directory with those in your staging area by using "git diff" with no parameters. This helps the user see if there are any differences between the files in the working directory and those that are in the staging area.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are helpful when trying out a new feature or when trying to refactor old code, but is experimental. Other changes that change to overall interface with the program may also benefit from branching out. If the code base is going to be incorporated into another project it may be helpful to create a branch. Branches keep multiple projects organized and can later be merged back into the master branch.

How do the diagrams help you visualize the branch structure?

Diagrams help visualize the branch structure by helping uses gain a spacial understanding of how different commits and branches are related to one another. It also helps understand the detached HEAD message and the necessity for creating new branches when going further back in the commits to create a new branch. It helps to understand that git will default to the master branch so without knowing the specific commit ID of otherwise "unreachable" commits, it will be almost impossible to find commits that are not in a branch path. You may be able to look around in the .git directory but that would take a lot of time and may not be worth it.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches together results in a commit of a single branch. The argument provided first is the branch that the second branch will be "merged into". This result in a new commit with the label of the first branch argument. The second branch stays where it was but is usually deleted with git branch -b "branch_name" because the commits from both branches can now be accessed from a single branch label. How the merge actually occurs is unknown to me at this time but it appears that git looks at the last known point at which the two branches diverged and makes assumptions about which parts of the code should be kept or discarded. In this sense it is imparative that the way a programmer goes about writing his/her code is that all functions must be able to execute independently or that the code is written in such a way that certain parts are not accidentally deleted. This makes input and outputs to functions very important and staying consistent across different versions a necessity. I still do not understand all the implications of writing code in this manner or its necessity for version-control and merging but it seems to be coming together for me.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The pros of automatic merging is it saves a lot of time regarding obvious merges that have changing parts that do not interact with one another. It's difficult to understand how git actually checks for this but it we will put it off for further investgation later.
Cons is that you may run into unexpected merges if git somehow makes an incorrect assumption. Again, I am unsure how git determines this so it is possible given my limited knowledge. 
Doing manual merges may be helpful because it requires communication and collaboration. And merges are more dilliberate.